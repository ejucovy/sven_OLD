
First, the test setup: we'll initialize a local repository.
Sven won't do this for you:

   >>> checkout_dir = '/tmp/svenhg'; other_checkoutdir = '/tmp/svenothercheckout'
   >>> import subprocess
   >>> subprocess.call(['rm', '-rf', checkout_dir, other_checkoutdir])
   0
   >>> subprocess.call(['hg', 'init', checkout_dir])
   0

Instantiate an object that knows about your local checkout directory:

   >>> from sven.hg import HgAccess as SvnAccess
   >>> client = SvnAccess(checkout_dir)

Sven throws its own flavors of IOErrors to deal with various edge cases of
interacting with the repository. For instance, trying to get metadata on
a resource that doesn't exist:

   >>> client.last_changed_rev('/path/to/file')
   Traceback (most recent call last):
   ...
   NoSuchResource: [Errno 2] No such file or directory: 'path/to/file'

# This is wrong, since there IS no revision 4. That should take precedence
# over anything else and raise a different error.
#The same error is thrown if you're looking for a particular revision:
#
#   >>> client.last_changed_rev('/path/to/file', rev=4)
#   Traceback (most recent call last):
#   ...
#   NoSuchResource: [Errno 2] No such file or directory: 'path/to/file'

Or if you're trying to get the contents of a resource:

   >>> client.read('/path/to/file')
   Traceback (most recent call last):
   ...
   NoSuchResource: [Errno 2] No such file or directory: 'path/to/file'

# See above!
#   >>> client.read('/path/to/file', rev=4)
#   Traceback (most recent call last):
#   ...
#   NoSuchResource: [Errno 2] No such file or directory: 'path/to/file'

Now let's actually save a file. Sven's workflow encourages you to think
of your repository as a filesystem; you write to a file and commit it
to the repository in a single step.

Mercurial's revisions are 0-indexed, unlike Subversion's 1-indexed log.

   >>> client.write('file', "zeroth version")
   <Revision kind=number 0>

   >>> client.write('file', "first version")
   <Revision kind=number 1>

Sven HG returns a custom Revision object that looks like a PySVN object,
because the author is irredeemably lazy.

Sven will create all necessary directories based on the resource path[1]:

   >>> client.write('/path/to/file', "the second versioned content")
   <Revision kind=number 2>

Note that this is revision 2, even though we created some intermediate
directories. Sven SVN behaves differently here -- see its doctests for 
more.

   >>> client.write('/path/to/file', "a second versioned content")
   <Revision kind=number 3>

You commit changes to an existing file in the same way as saving a new file:

   >>> client.write('/file', "second version")
   <Revision kind=number 4>

Now that we have some resources, we can finally start reading them too:

   >>> client.read('file')
   {'body': 'second version\n', 'kind': None}

And we can read previous versions as well, by passing in the desired
global revision number:

   >>> client.read('file', rev=1)
   {'body': 'first version\n', 'kind': None}

Sven will throw a different flavor of IOError if you try to read content
from a path that exists, but is a directory instead of a file:

   >>> client.read('/path')
   Traceback (most recent call last):
   ...
   NotAFile: [Errno 21] Is a directory: 'path'

To read the most recent version of a resource, don't pass in any revision:

   >>> client.read('path/to/file')
   {'body': 'a second versioned content\n', 'kind': None}

But if you do pass in a revision, sven will tell you if the file was unchanged
in that revision, with a custom exception:

   >>> client.read('path/to/file', rev=4)
   Traceback (most recent call last):
   ...
   ResourceUnchanged: Resource 'path/to/file' unchanged since 3

This ResourceUnchaged exception contains the revision number of the last
change made to the file:

   >>> from sven.exc import ResourceUnchanged
   >>> try:
   ...     client.read('path/to/file', rev=4)
   ... except ResourceUnchanged, e:
   ...     print "last changed at r%d" % e.last_change
   last changed at r3
   
   >>> client.read('path/to/file', rev=3)
   {'body': 'a second versioned content\n', 'kind': None}

You cannot overwrite directories with files, of course:

   >>> client.write('/path/to', "i'm gonna clobber this directory with a file!")
   Traceback (most recent call last):
   ...
   NotAFile: [Errno 21] Is a directory: 'path/to'

When writing a file, you can pass in a commit message, but there's no
support for file-level metadata in Sven HG now::

   >>> client.write('file', "now with metadata",
   ...              msg="Changed the content",
   ...              kind="text/plain")
   <Revision kind=number 5>

   >>> client.read('file')
   {'body': 'now with metadata\n', 'kind': None}

Great work!

[1] "Sven will create all necessary directories based on the resource path"
This is actually tricky -- so let's exercise it in a couple of cases:

   >>> client.write('a_file_at_the_root', "foo")
   <Revision kind=number 6>
   >>> client.write('one_level/deep', "foo")
   <Revision kind=number 7>
   >>> client.write('one_level/again', "foo")
   <Revision kind=number 8>
   >>> client.write('totally/nonexistent/path_to/a_file', "foo")
   <Revision kind=number 9>
   >>> client.write('totally/partly/extant_path/to_a_file', "foo")
   <Revision kind=number 10>
   >>> client.write('totally/partly/extant/path/to_another_file', "foo")
   <Revision kind=number 11>
   >>> client.write('a_file_at_the_root', "foobar")
   <Revision kind=number 12>
   >>> client.write('one_level/deep', "foobar")
   <Revision kind=number 13>
   >>> client.write('one_level/again', "foobar")
   <Revision kind=number 14>
   >>> client.write('totally/nonexistent/path_to/a_file', "foobar")
   <Revision kind=number 15>
   >>> client.write('totally/partly/extant_path/to_a_file', "foobar")
   <Revision kind=number 16>
   >>> client.write('totally/partly/extant/path/to_another_file', "foobar")
   <Revision kind=number 17>

Let's make sure logs work for directories.

   >>> client.last_changed_rev('totally')
   17

   >>> client.last_changed_rev('totally', rev=17)
   17

   >>> client.last_changed_rev('totally', rev=14)
   11

   >>> client.log('totally', rev=1)
   Traceback (most recent call last):
   ...
   NoSuchResource: [Errno 2] No such file or directory: 'totally'
